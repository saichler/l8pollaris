// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.21.12
// source: targets.proto

package l8poll

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type L8C_TargetList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*L8C_Target `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *L8C_TargetList) Reset() {
	*x = L8C_TargetList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_targets_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L8C_TargetList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L8C_TargetList) ProtoMessage() {}

func (x *L8C_TargetList) ProtoReflect() protoreflect.Message {
	mi := &file_targets_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L8C_TargetList.ProtoReflect.Descriptor instead.
func (*L8C_TargetList) Descriptor() ([]byte, []int) {
	return file_targets_proto_rawDescGZIP(), []int{0}
}

func (x *L8C_TargetList) GetList() []*L8C_Target {
	if x != nil {
		return x.List
	}
	return nil
}

type L8C_Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetId         string               `protobuf:"bytes,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	CollectService   *L8ServiceInfo       `protobuf:"bytes,2,opt,name=collect_service,json=collectService,proto3" json:"collect_service,omitempty"`
	ParsingService   *L8ServiceInfo       `protobuf:"bytes,3,opt,name=parsing_service,json=parsingService,proto3" json:"parsing_service,omitempty"`
	InventoryService *L8ServiceInfo       `protobuf:"bytes,4,opt,name=inventory_service,json=inventoryService,proto3" json:"inventory_service,omitempty"`
	Hosts            map[string]*L8C_Host `protobuf:"bytes,5,rep,name=hosts,proto3" json:"hosts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *L8C_Target) Reset() {
	*x = L8C_Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_targets_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L8C_Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L8C_Target) ProtoMessage() {}

func (x *L8C_Target) ProtoReflect() protoreflect.Message {
	mi := &file_targets_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L8C_Target.ProtoReflect.Descriptor instead.
func (*L8C_Target) Descriptor() ([]byte, []int) {
	return file_targets_proto_rawDescGZIP(), []int{1}
}

func (x *L8C_Target) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *L8C_Target) GetCollectService() *L8ServiceInfo {
	if x != nil {
		return x.CollectService
	}
	return nil
}

func (x *L8C_Target) GetParsingService() *L8ServiceInfo {
	if x != nil {
		return x.ParsingService
	}
	return nil
}

func (x *L8C_Target) GetInventoryService() *L8ServiceInfo {
	if x != nil {
		return x.InventoryService
	}
	return nil
}

func (x *L8C_Target) GetHosts() map[string]*L8C_Host {
	if x != nil {
		return x.Hosts
	}
	return nil
}

type L8ServiceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	ServiceArea int32  `protobuf:"varint,2,opt,name=service_area,json=serviceArea,proto3" json:"service_area,omitempty"`
}

func (x *L8ServiceInfo) Reset() {
	*x = L8ServiceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_targets_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L8ServiceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L8ServiceInfo) ProtoMessage() {}

func (x *L8ServiceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_targets_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L8ServiceInfo.ProtoReflect.Descriptor instead.
func (*L8ServiceInfo) Descriptor() ([]byte, []int) {
	return file_targets_proto_rawDescGZIP(), []int{2}
}

func (x *L8ServiceInfo) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *L8ServiceInfo) GetServiceArea() int32 {
	if x != nil {
		return x.ServiceArea
	}
	return 0
}

type L8C_Host struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetId string                    `protobuf:"bytes,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Configs  map[int32]*L8T_Connection `protobuf:"bytes,3,rep,name=configs,proto3" json:"configs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Polls    map[string]string         `protobuf:"bytes,4,rep,name=polls,proto3" json:"polls,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Groups   map[string]string         `protobuf:"bytes,5,rep,name=groups,proto3" json:"groups,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *L8C_Host) Reset() {
	*x = L8C_Host{}
	if protoimpl.UnsafeEnabled {
		mi := &file_targets_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L8C_Host) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L8C_Host) ProtoMessage() {}

func (x *L8C_Host) ProtoReflect() protoreflect.Message {
	mi := &file_targets_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L8C_Host.ProtoReflect.Descriptor instead.
func (*L8C_Host) Descriptor() ([]byte, []int) {
	return file_targets_proto_rawDescGZIP(), []int{3}
}

func (x *L8C_Host) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *L8C_Host) GetConfigs() map[int32]*L8T_Connection {
	if x != nil {
		return x.Configs
	}
	return nil
}

func (x *L8C_Host) GetPolls() map[string]string {
	if x != nil {
		return x.Polls
	}
	return nil
}

func (x *L8C_Host) GetGroups() map[string]string {
	if x != nil {
		return x.Groups
	}
	return nil
}

type L8T_Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol         L8C_Protocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=l8poll.L8C_Protocol" json:"protocol,omitempty"`
	Addr             string       `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Port             int32        `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	ReadCommunity    string       `protobuf:"bytes,4,opt,name=read_community,json=readCommunity,proto3" json:"read_community,omitempty"`
	WriteCommunity   string       `protobuf:"bytes,5,opt,name=write_community,json=writeCommunity,proto3" json:"write_community,omitempty"`
	Username         string       `protobuf:"bytes,6,opt,name=username,proto3" json:"username,omitempty"`
	Password         string       `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`
	Prompt           []string     `protobuf:"bytes,8,rep,name=prompt,proto3" json:"prompt,omitempty"`
	Terminal         string       `protobuf:"bytes,9,opt,name=terminal,proto3" json:"terminal,omitempty"`
	TerminalCommands []string     `protobuf:"bytes,10,rep,name=terminal_commands,json=terminalCommands,proto3" json:"terminal_commands,omitempty"`
	Timeout          int64        `protobuf:"varint,11,opt,name=timeout,proto3" json:"timeout,omitempty"`
	KubeConfig       string       `protobuf:"bytes,12,opt,name=KubeConfig,proto3" json:"KubeConfig,omitempty"`
	KukeContext      string       `protobuf:"bytes,13,opt,name=KukeContext,proto3" json:"KukeContext,omitempty"`
}

func (x *L8T_Connection) Reset() {
	*x = L8T_Connection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_targets_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L8T_Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L8T_Connection) ProtoMessage() {}

func (x *L8T_Connection) ProtoReflect() protoreflect.Message {
	mi := &file_targets_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L8T_Connection.ProtoReflect.Descriptor instead.
func (*L8T_Connection) Descriptor() ([]byte, []int) {
	return file_targets_proto_rawDescGZIP(), []int{4}
}

func (x *L8T_Connection) GetProtocol() L8C_Protocol {
	if x != nil {
		return x.Protocol
	}
	return L8C_Protocol_L8P_Invalid_Protocol
}

func (x *L8T_Connection) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *L8T_Connection) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *L8T_Connection) GetReadCommunity() string {
	if x != nil {
		return x.ReadCommunity
	}
	return ""
}

func (x *L8T_Connection) GetWriteCommunity() string {
	if x != nil {
		return x.WriteCommunity
	}
	return ""
}

func (x *L8T_Connection) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *L8T_Connection) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *L8T_Connection) GetPrompt() []string {
	if x != nil {
		return x.Prompt
	}
	return nil
}

func (x *L8T_Connection) GetTerminal() string {
	if x != nil {
		return x.Terminal
	}
	return ""
}

func (x *L8T_Connection) GetTerminalCommands() []string {
	if x != nil {
		return x.TerminalCommands
	}
	return nil
}

func (x *L8T_Connection) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *L8T_Connection) GetKubeConfig() string {
	if x != nil {
		return x.KubeConfig
	}
	return ""
}

func (x *L8T_Connection) GetKukeContext() string {
	if x != nil {
		return x.KukeContext
	}
	return ""
}

type CMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[string][]byte `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CMap) Reset() {
	*x = CMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_targets_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMap) ProtoMessage() {}

func (x *CMap) ProtoReflect() protoreflect.Message {
	mi := &file_targets_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMap.ProtoReflect.Descriptor instead.
func (*CMap) Descriptor() ([]byte, []int) {
	return file_targets_proto_rawDescGZIP(), []int{5}
}

func (x *CMap) GetData() map[string][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns map[int32]string `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Rows    map[int32]*CRow  `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CTable) Reset() {
	*x = CTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_targets_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTable) ProtoMessage() {}

func (x *CTable) ProtoReflect() protoreflect.Message {
	mi := &file_targets_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTable.ProtoReflect.Descriptor instead.
func (*CTable) Descriptor() ([]byte, []int) {
	return file_targets_proto_rawDescGZIP(), []int{6}
}

func (x *CTable) GetColumns() map[int32]string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *CTable) GetRows() map[int32]*CRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

type CRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[int32][]byte `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CRow) Reset() {
	*x = CRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_targets_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRow) ProtoMessage() {}

func (x *CRow) ProtoReflect() protoreflect.Message {
	mi := &file_targets_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRow.ProtoReflect.Descriptor instead.
func (*CRow) Descriptor() ([]byte, []int) {
	return file_targets_proto_rawDescGZIP(), []int{7}
}

func (x *CRow) GetData() map[int32][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_targets_proto protoreflect.FileDescriptor

var file_targets_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x6c, 0x38, 0x70, 0x6f, 0x6c, 0x6c, 0x1a, 0x0e, 0x70, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x69,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x38, 0x0a, 0x0e, 0x4c, 0x38, 0x43, 0x5f, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x38, 0x70, 0x6f, 0x6c, 0x6c,
	0x2e, 0x4c, 0x38, 0x43, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0xee, 0x02, 0x0a, 0x0a, 0x4c, 0x38, 0x43, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a,
	0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x38, 0x70, 0x6f, 0x6c, 0x6c, 0x2e,
	0x4c, 0x38, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a,
	0x0f, 0x70, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x38, 0x70, 0x6f, 0x6c, 0x6c, 0x2e,
	0x4c, 0x38, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x70,
	0x61, 0x72, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a,
	0x11, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x38, 0x70, 0x6f, 0x6c,
	0x6c, 0x2e, 0x4c, 0x38, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x10, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x33, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6c, 0x38, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x4c, 0x38, 0x43, 0x5f, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x1a, 0x4a, 0x0a, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x38, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x4c,
	0x38, 0x43, 0x5f, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x55, 0x0a, 0x0d, 0x4c, 0x38, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x22, 0x92, 0x03, 0x0a, 0x08, 0x4c, 0x38,
	0x43, 0x5f, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x38, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x4c, 0x38,
	0x43, 0x5f, 0x48, 0x6f, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x05,
	0x70, 0x6f, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x38,
	0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x4c, 0x38, 0x43, 0x5f, 0x48, 0x6f, 0x73, 0x74, 0x2e, 0x50, 0x6f,
	0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x70, 0x6f, 0x6c, 0x6c, 0x73, 0x12,
	0x34, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6c, 0x38, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x4c, 0x38, 0x43, 0x5f, 0x48, 0x6f, 0x73,
	0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a, 0x52, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x38, 0x70, 0x6f, 0x6c, 0x6c, 0x2e,
	0x4c, 0x38, 0x54, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x50, 0x6f, 0x6c,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaf,
	0x03, 0x0a, 0x0e, 0x4c, 0x38, 0x54, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6c, 0x38, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x4c, 0x38, 0x43,
	0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x10, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20,
	0x0a, 0x0b, 0x4b, 0x75, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x4b, 0x75, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x22, 0x6b, 0x0a, 0x04, 0x43, 0x4d, 0x61, 0x70, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x38, 0x70, 0x6f, 0x6c, 0x6c, 0x2e,
	0x43, 0x4d, 0x61, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf0, 0x01,
	0x0a, 0x06, 0x43, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x38, 0x70, 0x6f,
	0x6c, 0x6c, 0x2e, 0x43, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12,
	0x2c, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6c, 0x38, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x43, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x52, 0x6f,
	0x77, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x1a, 0x3a, 0x0a,
	0x0c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x09, 0x52, 0x6f, 0x77,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x38, 0x70, 0x6f, 0x6c, 0x6c,
	0x2e, 0x43, 0x52, 0x6f, 0x77, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x6b, 0x0a, 0x04, 0x43, 0x52, 0x6f, 0x77, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x38, 0x70, 0x6f, 0x6c, 0x6c, 0x2e,
	0x43, 0x52, 0x6f, 0x77, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x30, 0x0a,
	0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x38, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x42, 0x07, 0x4c, 0x38, 0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x01, 0x5a,
	0x0e, 0x2e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6c, 0x38, 0x70, 0x6f, 0x6c, 0x6c, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_targets_proto_rawDescOnce sync.Once
	file_targets_proto_rawDescData = file_targets_proto_rawDesc
)

func file_targets_proto_rawDescGZIP() []byte {
	file_targets_proto_rawDescOnce.Do(func() {
		file_targets_proto_rawDescData = protoimpl.X.CompressGZIP(file_targets_proto_rawDescData)
	})
	return file_targets_proto_rawDescData
}

var file_targets_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_targets_proto_goTypes = []interface{}{
	(*L8C_TargetList)(nil), // 0: l8poll.L8C_TargetList
	(*L8C_Target)(nil),     // 1: l8poll.L8C_Target
	(*L8ServiceInfo)(nil),  // 2: l8poll.L8ServiceInfo
	(*L8C_Host)(nil),       // 3: l8poll.L8C_Host
	(*L8T_Connection)(nil), // 4: l8poll.L8T_Connection
	(*CMap)(nil),           // 5: l8poll.CMap
	(*CTable)(nil),         // 6: l8poll.CTable
	(*CRow)(nil),           // 7: l8poll.CRow
	nil,                    // 8: l8poll.L8C_Target.HostsEntry
	nil,                    // 9: l8poll.L8C_Host.ConfigsEntry
	nil,                    // 10: l8poll.L8C_Host.PollsEntry
	nil,                    // 11: l8poll.L8C_Host.GroupsEntry
	nil,                    // 12: l8poll.CMap.DataEntry
	nil,                    // 13: l8poll.CTable.ColumnsEntry
	nil,                    // 14: l8poll.CTable.RowsEntry
	nil,                    // 15: l8poll.CRow.DataEntry
	(L8C_Protocol)(0),      // 16: l8poll.L8C_Protocol
}
var file_targets_proto_depIdxs = []int32{
	1,  // 0: l8poll.L8C_TargetList.list:type_name -> l8poll.L8C_Target
	2,  // 1: l8poll.L8C_Target.collect_service:type_name -> l8poll.L8ServiceInfo
	2,  // 2: l8poll.L8C_Target.parsing_service:type_name -> l8poll.L8ServiceInfo
	2,  // 3: l8poll.L8C_Target.inventory_service:type_name -> l8poll.L8ServiceInfo
	8,  // 4: l8poll.L8C_Target.hosts:type_name -> l8poll.L8C_Target.HostsEntry
	9,  // 5: l8poll.L8C_Host.configs:type_name -> l8poll.L8C_Host.ConfigsEntry
	10, // 6: l8poll.L8C_Host.polls:type_name -> l8poll.L8C_Host.PollsEntry
	11, // 7: l8poll.L8C_Host.groups:type_name -> l8poll.L8C_Host.GroupsEntry
	16, // 8: l8poll.L8T_Connection.protocol:type_name -> l8poll.L8C_Protocol
	12, // 9: l8poll.CMap.data:type_name -> l8poll.CMap.DataEntry
	13, // 10: l8poll.CTable.columns:type_name -> l8poll.CTable.ColumnsEntry
	14, // 11: l8poll.CTable.rows:type_name -> l8poll.CTable.RowsEntry
	15, // 12: l8poll.CRow.data:type_name -> l8poll.CRow.DataEntry
	3,  // 13: l8poll.L8C_Target.HostsEntry.value:type_name -> l8poll.L8C_Host
	4,  // 14: l8poll.L8C_Host.ConfigsEntry.value:type_name -> l8poll.L8T_Connection
	7,  // 15: l8poll.CTable.RowsEntry.value:type_name -> l8poll.CRow
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_targets_proto_init() }
func file_targets_proto_init() {
	if File_targets_proto != nil {
		return
	}
	file_pollaris_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_targets_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L8C_TargetList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_targets_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L8C_Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_targets_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L8ServiceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_targets_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L8C_Host); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_targets_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L8T_Connection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_targets_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_targets_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_targets_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_targets_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_targets_proto_goTypes,
		DependencyIndexes: file_targets_proto_depIdxs,
		MessageInfos:      file_targets_proto_msgTypes,
	}.Build()
	File_targets_proto = out.File
	file_targets_proto_rawDesc = nil
	file_targets_proto_goTypes = nil
	file_targets_proto_depIdxs = nil
}
